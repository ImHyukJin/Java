package Programers;


import java.util.*;
class Solution {
	static int answer = -1;
	static int[] divx = {0 , 0 , -1 , 1};
	static int[] divy = {-1 , 1 , 0 , 0};
	static int count = 0 ;

	public int solution(int[][] maps) {
		//최단거리니까 bfs,좌표니까 클래스 하나 생성
		//내 자리 0,0 상대 n-1,m-1
		//못가면 -1

		//bfs 시작 , queue linkedlist
		//초기화
		 boolean[][] visited = new boolean[maps.length][maps[0].length-1]; 
		
		Queue<Node> que = new LinkedList<>();
		Node node = new Node(0,0,count);
		que.add(node);
		visited[node.y][node.x] = true;
		
		while(!que.isEmpty()) {
			node = que.poll();
			
			for(int i = 0 ; i < 4 ; i++) {
				int newy = node.y+divy[i];
				int newx = node.x+divx[i];
				if(!visited[newy][newx] && maps[newy][newx]==1	) {
					que.add(new Node(newy,newx,count+1));
					visited[newy][newx] =true;
				}
			}
		}
		
		return answer;
	}
}

class Node{
	int y ;
	int x ;
	int count;
	public Node(int y , int x , int count) {
		this.y = y;
		this.x = x;
		this.count = count;
	}
}